namespace CaeriusNet.Generator.Dto;

public sealed partial class DtoSourceGenerator
{
	private static void Generate(SourceProductionContext context, ImmutableArray<DtoRecord> dtoRecords, bool isEnabled)
	{
		if (!isEnabled)
			return;

		if (dtoRecords.IsEmpty)
			return;

		foreach (var record in dtoRecords)
		{
			var writer = new SourceWriter()
				.AppendLine("// <auto-generated/>")
				.AppendLine("#nullable enable")
				.AppendLine()
				.AppendLine("using System;")
				.AppendLine("using System.Data;")
				.AppendLine("using Microsoft.Data.SqlClient;")
				.AppendLine("using System.Globalization;")
				.AppendLine("using CaeriusNet.Mappers;")
				.AppendLine()
				.AppendLine($"namespace {record.Namespace};")
				.AppendLine();

			// We're creating a partial record that implements ISpMapper
			writer.AppendLine($"public sealed partial record {record.RecordTypeName}");
			writer.AppendIndentedLine($": ISpMapper<{record.RecordTypeName}>");

			using (writer.CreateScope())
			{
				// Implement the static MapFromDataReader method required by ISpMapper
				writer.AppendIndentedLine(
						$"public static {record.RecordTypeName} MapFromDataReader(SqlDataReader reader)")
					.AppendIndentedLine("{");

				writer.Indent();

				// Check for null reader
				writer.AppendIndentedLine("if (reader == null)")
					.AppendIndentedLine("    throw new ArgumentNullException(nameof(reader));")
					.AppendLine();

				// Create new instance based on constructor parameters
				if (record.Properties.Count > 0)
				{
					writer.AppendIndentedLine($"return new {record.RecordTypeName}(");

					writer.Indent();

					for (var i = 0; i < record.Properties.Count; i++)
					{
						var property = record.Properties[i];
						var isLast = i == record.Properties.Count - 1;

						GeneratePropertyMapping(writer, property, i);
						writer.Append(isLast ? "" : ",").AppendLine();
					}

					writer.Unindent().AppendIndentedLine(");");
				}
				else
				{
					writer.AppendIndentedLine($"return new {record.RecordTypeName}();");
				}

				writer.Unindent().AppendIndentedLine("}");
			}

			context.AddSource($"{record.RecordTypeName}.g.cs", writer.ToSourceText());
		}
	}

	private static void GeneratePropertyMapping(SourceWriter writer, DtoProperty property, int index)
	{
		writer.AppendIndented("");

		var readerMethod = GetReaderMethod(property);
		var typeName = property.TypeName;
		var specialConversion = GetSpecialTypeConversion(typeName);

		if (property.IsNullable)
		{
			writer.Append($"reader.IsDBNull({index}) ? ");

			if (typeName.StartsWith("System.Nullable<") || typeName == "string" ||
			    typeName == "byte[]" || typeName == "System.Byte[]" ||
			    (!typeName.StartsWith("System") && !typeName.Contains("DateOnly") &&
			     !typeName.Contains("TimeOnly") && !typeName.Contains("Version") &&
			     !typeName.Contains("Uri")))
				writer.Append("null : ");
			else
				writer.Append("default : ");
		}

		// For special conversions that need custom handling
		if (!string.IsNullOrEmpty(specialConversion))
			writer.Append(specialConversion.Replace("{index}", index.ToString()));
		else
			writer.Append($"reader.{readerMethod}({index})");
	}

	private static string GetSpecialTypeConversion(string typeName)
	{
		return typeName switch
		{
			"System.DateOnly" => "DateOnly.FromDateTime(reader.GetDateTime({index}))",
			"System.TimeOnly" => "TimeOnly.FromDateTime(reader.GetDateTime({index}))",
			"System.Uri" => "new Uri(reader.GetString({index}))",
			"System.Version" => "Version.Parse(reader.GetString({index}))",
			"byte[]" or "System.Byte[]" => "(byte[])reader.GetValue({index})",
			_ => string.Empty
		};
	}

	private static string GetReaderMethod(DtoProperty property)
	{
		return property.SqlTypeName switch
		{
			"bit" => "GetBoolean",
			"tinyint" => "GetByte",
			"smallint" => "GetInt16",
			"int" => "GetInt32",
			"bigint" => "GetInt64",
			"decimal" => "GetDecimal",
			"real" => "GetFloat",
			"float" => "GetDouble",
			"nvarchar" => "GetString",
			"nchar" => "GetString",
			"varchar" => "GetString",
			"char" => "GetString",
			"text" => "GetString",
			"datetime" => "GetDateTime",
			"datetime2" => "GetDateTime",
			"date" => "GetDateTime",
			"smalldatetime" => "GetDateTime",
			"uniqueidentifier" => "GetGuid",
			"datetimeoffset" => "GetDateTimeOffset",
			"time" => "GetTimeSpan",
			"varbinary" => "GetSqlBinary().Value",
			"binary" => "GetSqlBinary().Value",
			"image" => "GetSqlBinary().Value",
			_ => "GetValue"
		};
	}
}