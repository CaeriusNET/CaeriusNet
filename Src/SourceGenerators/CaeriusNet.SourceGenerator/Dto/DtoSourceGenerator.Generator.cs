namespace CaeriusNet.SourceGenerator.Dto;

public sealed partial class DtoSourceGenerator
{
    /// <summary>
    ///     Generates the source code for an ISpMapper implementation.
    /// </summary>
    private static string GenerateMapperSource(Metadata metadata)
    {
        var source = new StringBuilder();

        // Add usings
        source.AppendLine("// <auto-generated by CaeriusNet.SourceGenerator />");
        source.AppendLine("#nullable enable");
        source.AppendLine();
        source.AppendLine("using System;");
        source.AppendLine("using Microsoft.Data.SqlClient;");
        source.AppendLine("using CaeriusNet.Core.Mappers;");
        source.AppendLine();

        // Begin namespace
        source.AppendLine($"namespace {metadata.Namespace};");
        source.AppendLine();

        // Begin class/record declaration
        var declarationType = metadata.DeclarationSyntax.Kind() == SyntaxKind.ClassDeclaration ? "class" : "record";

        source.AppendLine(
            $"public sealed partial {declarationType} {metadata.RecordName} : ISpMapper<{metadata.RecordName}>");
        source.AppendLine("{");

        // Generate MapFromDataReader implementation
        source.AppendLine($"	public static {metadata.RecordName} MapFromDataReader(SqlDataReader reader)");
        source.AppendLine(" 	{");

        // Create new instance and populate from reader
        source.AppendLine($"		return new {metadata.RecordName}(");

        // Add parameters
        for (var i = 0; i < metadata.Parameters.Count; i++)
        {
            var parameter = metadata.Parameters[i];
            var comma = i < metadata.Parameters.Count - 1 ? "," : "";
            source.AppendLine($"		    {GetReaderExpression(parameter)}{comma}");
        }

        source.AppendLine("        );");
        source.AppendLine("    }");
        source.AppendLine("}");

        return source.ToString();
    }

    /// <summary>
    ///     Gets the appropriate reader expression for a parameter based on its type and nullability.
    /// </summary>
    private static string GetReaderExpression(ParameterMetadata parameter)
    {
        var ordinal = parameter.OrdinalPosition;

        // Check if the type is an enum
        var isEnum = parameter.TypeSymbol.TypeKind == TypeKind.Enum;
        var enumCastExpression = isEnum ? $"({parameter.TypeName})" : "";

        // Handle nullable types
        if (!parameter.IsNullable)
            // Non-nullable types (special cases)
            return parameter.TypeName switch
            {
                var tn when tn.Contains("byte[]") =>
                    $"(byte[])reader.GetValue({ordinal})",

                var tn when tn.Contains("DateOnly") =>
                    $"DateOnly.FromDateTime(reader.GetDateTime({ordinal}))",

                var tn when tn.Contains("TimeOnly") =>
                    $"TimeOnly.FromDateTime(reader.GetDateTime({ordinal}))",

                var tn when tn.Contains("char") =>
                    $"reader.GetString({ordinal})[0]",

                _ => isEnum
                    ? $"{enumCastExpression}reader.{parameter.ReaderMethod}({ordinal})"
                    : $"reader.{parameter.ReaderMethod}({ordinal})"
            };

        var nullCheckExpression = $"reader.IsDBNull({ordinal}) ? null : ";

        // Special cases based on the type
        return parameter.TypeName switch
        {
            var tn when tn.Contains("byte[]") =>
                $"{nullCheckExpression}(byte[])reader.GetValue({ordinal})",

            var tn when tn.Contains("DateOnly") =>
                $"{nullCheckExpression}DateOnly.FromDateTime(reader.GetDateTime({ordinal}))",

            var tn when tn.Contains("TimeOnly") =>
                $"{nullCheckExpression}TimeOnly.FromDateTime(reader.GetDateTime({ordinal}))",

            var tn when tn.Contains("char") =>
                $"{nullCheckExpression}reader.GetString({ordinal})[0]",

            _ => isEnum
                ? $"{nullCheckExpression}{enumCastExpression}reader.{parameter.ReaderMethod}({ordinal})"
                : $"{nullCheckExpression}reader.{parameter.ReaderMethod}({ordinal})"
        };
    }
}